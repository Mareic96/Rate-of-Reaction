import numpy as np
from matplotlib import pyplot as plt
Gas_constant = 8.314
print("Importing numbers...")
Temp = [700,730,760,790,810,840,910,1000]
Rate = [0.011, 0.035, 0.105, 0.343, 0.789, 2.17, 20.0, 145]
print("Number loaded""\n")

print("Find the natural log of the rate")
Log = []
for i in Rate:
    convert = np.log(i)
    Log.append(convert)
print(Log)
print("\n")

print("Find the inverse of the temperature")
Temperature = []
for x in Temp:
    inverse = 1/x
    Temperature.append(inverse)
print(Temperature)
print("\n")

def Slope():
    New_Temperature = []
    Denomenator = []
    New_Log = []
    mean_x = sum(Temperature) / len(Temperature)
    for i in Temperature:
        x = i - mean_x
        New_Temperature.append(x)
        x2 = (i - mean_x)**2
        Denomenator.append(x2)
    mean_y = sum(Log) / len(Log)
    for j in Log:
        y = j - mean_y
        New_Log.append(y)
    numerator = [New_Temperature[y] * New_Log[y] for y in range(len(New_Temperature))]
    slope = (sum(numerator) / sum(Denomenator))
    return (slope)
# y = mx + c: I need to rearrange the equation to get c
mean_X = sum(Temperature) / len(Temperature)
mean_Y = sum(Log) / len(Log)
mx = Slope() * mean_X
C = mean_Y - mx
#-22650.7x + 27.70711
#now that you have m and c, use: y = mx + c to calculate y. This will give you your regression line
answer = []
for i in Temperature:
    line = (Slope() * i) + C
    answer.append(line)
print(answer)

def rsquared():
    Top = []
    Bottom = []
    mean = sum(answer) / len(answer)
    mean1 = sum(Log) / len(Log)
    for i in answer:
        predicted = (i - mean)**2
        Top.append(predicted)
    for k in Log:
        actual = (k - mean1)**2
        Bottom.append(actual)
    r2 = (sum(Top) / sum(Bottom))
    return (r2)
rsquared()


def graph():
    plt.plot(Temperature, Log, 'o')
    plt.plot(Temperature, answer)
    plt.title('Rate of Reaction')
    plt.xlabel('1/Temperature (K)')
    plt.ylabel('Rate of Reaction (K/L s-1)')
    plt.legend(['Rate of Reaction','y = -22651x + 27.707','R2 = 0.9986'])
    plt.text(0.0013545, 3.5, 'R2 = 0.9986', bbox = dict(facecolor = 'white', alpha = 0.5))
    plt.show()
graph()
